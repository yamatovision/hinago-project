openapi: 3.0.3
info:
  title: HinagoProject API
  description: ボリュームチェックシステムのRESTful API仕様
  version: 1.0.0
  contact:
    name: HinagoProject開発チーム
servers:
  - url: https://api.example.com/api
    description: 本番環境
  - url: https://staging-api.example.com/api
    description: ステージング環境
  - url: http://localhost:3000/api
    description: 開発環境

# 共通コンポーネント定義
components:
  # 共通スキーマ
  schemas:
    # 成功レスポンス
    SuccessResponse:
      type: object
      required:
        - success
        - data
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          description: レスポンスデータ
        meta:
          type: object
          properties:
            total:
              type: integer
              description: 総アイテム数
            page:
              type: integer
              description: 現在のページ番号
            limit:
              type: integer
              description: 1ページあたりのアイテム数
            totalPages:
              type: integer
              description: 総ページ数
    
    # エラーレスポンス
    ErrorResponse:
      type: object
      required:
        - success
        - error
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          required:
            - code
            - message
          properties:
            code:
              type: string
              description: エラーコード
            message:
              type: string
              description: エラーメッセージ
            details:
              type: object
              description: エラー詳細情報
    
    # ユーザー
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        name:
          type: string
        role:
          type: string
          enum: [user]
        organizationId:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    
    # 組織
    Organization:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        subscription:
          type: string
          enum: [free, basic, premium]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    
    # 物件
    Property:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        address:
          type: string
        area:
          type: number
          format: float
          description: 敷地面積（㎡）
        zoneType:
          type: string
          enum: [category1, category2, category3, category4, category5, category6, category7, category8, category9, category10, category11, category12]
          description: 用途地域
        fireZone:
          type: string
          enum: [fire, semi-fire, none]
          description: 防火地域区分
        shadowRegulation:
          type: string
          enum: [type1, type2, none]
          description: 日影規制
        buildingCoverage:
          type: integer
          description: 建蔽率（%）
        floorAreaRatio:
          type: integer
          description: 容積率（%）
        heightLimit:
          type: number
          format: float
          description: 高さ制限（m）
        roadWidth:
          type: number
          format: float
          description: 前面道路幅員（m）
        allowedBuildingArea:
          type: number
          format: float
          description: 許容建築面積（㎡）
        price:
          type: integer
          description: 想定取得価格（円）
        status:
          type: string
          enum: [new, negotiating, contracted, completed]
          description: 物件ステータス
        notes:
          type: string
          description: 備考・メモ
        organizationId:
          type: string
        shapeData:
          $ref: '#/components/schemas/ShapeData'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    
    # 敷地形状データ
    ShapeData:
      type: object
      properties:
        points:
          type: array
          items:
            $ref: '#/components/schemas/Point'
        width:
          type: number
          format: float
          description: 敷地間口（m）
        depth:
          type: number
          format: float
          description: 敷地奥行（m）
        sourceFile:
          type: string
          description: 元ファイル名
    
    # 座標点
    Point:
      type: object
      properties:
        x:
          type: number
          format: float
        y:
          type: number
          format: float
    
    # 物件登録データ
    PropertyCreateData:
      type: object
      required:
        - name
        - address
        - area
        - zoneType
        - fireZone
        - buildingCoverage
        - floorAreaRatio
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        address:
          type: string
          minLength: 1
          maxLength: 200
        area:
          type: number
          format: float
          minimum: 0.1
        zoneType:
          type: string
          enum: [category1, category2, category3, category4, category5, category6, category7, category8, category9, category10, category11, category12]
        fireZone:
          type: string
          enum: [fire, semi-fire, none]
        shadowRegulation:
          type: string
          enum: [type1, type2, none]
        buildingCoverage:
          type: integer
          minimum: 0
          maximum: 100
        floorAreaRatio:
          type: integer
          minimum: 0
          maximum: 1000
        heightLimit:
          type: number
          format: float
          minimum: 0
        roadWidth:
          type: number
          format: float
          minimum: 0
        price:
          type: integer
          minimum: 0
        status:
          type: string
          enum: [new, negotiating, contracted, completed]
          default: new
        notes:
          type: string
          maxLength: 1000
    
    # 物件更新データ
    PropertyUpdateData:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        address:
          type: string
          minLength: 1
          maxLength: 200
        area:
          type: number
          format: float
          minimum: 0.1
        zoneType:
          type: string
          enum: [category1, category2, category3, category4, category5, category6, category7, category8, category9, category10, category11, category12]
        fireZone:
          type: string
          enum: [fire, semi-fire, none]
        shadowRegulation:
          type: string
          enum: [type1, type2, none]
        buildingCoverage:
          type: integer
          minimum: 0
          maximum: 100
        floorAreaRatio:
          type: integer
          minimum: 0
          maximum: 1000
        heightLimit:
          type: number
          format: float
          minimum: 0
        roadWidth:
          type: number
          format: float
          minimum: 0
        price:
          type: integer
          minimum: 0
        status:
          type: string
          enum: [new, negotiating, contracted, completed]
        notes:
          type: string
          maxLength: 1000
    
    # 文書
    Document:
      type: object
      properties:
        id:
          type: string
        propertyId:
          type: string
        name:
          type: string
        fileType:
          type: string
        fileSize:
          type: integer
        fileUrl:
          type: string
        documentType:
          type: string
          enum: [survey-map, register, contract, photo, other]
        description:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    
    # ボリュームチェック結果
    VolumeCheckResult:
      type: object
      properties:
        id:
          type: string
        propertyId:
          type: string
        assetType:
          type: string
          enum: [mansion, office, wooden-apartment, hotel]
        buildingArea:
          type: number
          format: float
          description: 建築面積（㎡）
        totalFloorArea:
          type: number
          format: float
          description: 延床面積（㎡）
        buildingHeight:
          type: number
          format: float
          description: 建物高さ（m）
        consumptionRate:
          type: number
          format: float
          description: 容積消化率（%）
        floors:
          type: array
          items:
            $ref: '#/components/schemas/Floor'
        model3dData:
          type: object
          properties:
            url:
              type: string
            format:
              type: string
        createdAt:
          type: string
          format: date-time
    
    # 階別情報
    Floor:
      type: object
      properties:
        level:
          type: integer
          description: 階数
        area:
          type: number
          format: float
          description: 床面積（㎡）
        commonArea:
          type: number
          format: float
          description: 共用部面積（㎡）
        privateArea:
          type: number
          format: float
          description: 専有部面積（㎡）
    
    # 建築パラメータ
    BuildingParams:
      type: object
      required:
        - assetType
        - floorHeight
        - commonAreaRatio
        - floors
      properties:
        assetType:
          type: string
          enum: [mansion, office, wooden-apartment, hotel]
        floorHeight:
          type: number
          format: float
          minimum: 2.5
          maximum: 5.0
          description: 階高（m）
        commonAreaRatio:
          type: number
          format: float
          minimum: 0
          maximum: 50
          description: 共用部率（%）
        roadWidth:
          type: number
          format: float
          minimum: 0
          description: 前面道路幅員（m）
        floors:
          type: integer
          minimum: 1
          maximum: 50
          description: 階数
    
    # 履歴エントリ
    HistoryEntry:
      type: object
      properties:
        id:
          type: string
        propertyId:
          type: string
        userId:
          type: string
        action:
          type: string
          enum: [create, update, delete]
        description:
          type: string
        details:
          type: object
        createdAt:
          type: string
          format: date-time
    
    # 認証トークン
    AuthToken:
      type: object
      properties:
        token:
          type: string
        refreshToken:
          type: string
        expiresAt:
          type: string
          format: date-time
    
    # 認証レスポンス
    AuthResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        token:
          $ref: '#/components/schemas/AuthToken'
  
  # リクエストボディ
  requestBodies:
    # ログインリクエスト
    LoginRequest:
      description: ログインリクエスト
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                type: string
                format: email
              password:
                type: string
                minLength: 8
              rememberMe:
                type: boolean
                default: false
    
    # ユーザー登録リクエスト
    RegisterRequest:
      description: ユーザー登録リクエスト
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - email
              - password
              - name
              - organizationName
            properties:
              email:
                type: string
                format: email
              password:
                type: string
                minLength: 8
              name:
                type: string
                minLength: 1
                maxLength: 50
              organizationName:
                type: string
                minLength: 1
                maxLength: 100
    
    # パスワードリセット要求
    PasswordResetRequest:
      description: パスワードリセット要求
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - email
            properties:
              email:
                type: string
                format: email
    
    # パスワードリセット確認
    PasswordResetConfirm:
      description: パスワードリセット確認
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - token
              - password
            properties:
              token:
                type: string
              password:
                type: string
                minLength: 8
    
    # トークン更新リクエスト
    RefreshTokenRequest:
      description: トークン更新リクエスト
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - refreshToken
            properties:
              refreshToken:
                type: string
    
    # 物件作成リクエスト
    PropertyCreateRequest:
      description: 物件作成リクエスト
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PropertyCreateData'
    
    # 物件更新リクエスト
    PropertyUpdateRequest:
      description: 物件更新リクエスト
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PropertyUpdateData'
    
    # 敷地形状更新リクエスト
    ShapeUpdateRequest:
      description: 敷地形状更新リクエスト
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ShapeData'
    
    # ボリュームチェックリクエスト
    VolumeCheckRequest:
      description: ボリュームチェックリクエスト
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - propertyId
              - buildingParams
            properties:
              propertyId:
                type: string
              buildingParams:
                $ref: '#/components/schemas/BuildingParams'
  
  # レスポンス
  responses:
    # 認証エラー
    UnauthorizedError:
      description: 認証エラー
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorResponse'
            example:
              success: false
              error:
                code: AUTH_REQUIRED
                message: 認証が必要です
    
    # 権限エラー
    ForbiddenError:
      description: 権限エラー
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorResponse'
            example:
              success: false
              error:
                code: PERMISSION_DENIED
                message: この操作を実行する権限がありません
    
    # リソース未検出
    NotFoundError:
      description: リソース未検出
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorResponse'
            example:
              success: false
              error:
                code: RESOURCE_NOT_FOUND
                message: 指定されたリソースが見つかりません
    
    # バリデーションエラー
    ValidationError:
      description: バリデーションエラー
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorResponse'
            example:
              success: false
              error:
                code: VALIDATION_ERROR
                message: 入力データが不正です
                details:
                  field1: エラー内容1
                  field2: エラー内容2
  
  # セキュリティスキーム
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

# パス定義
paths:
  # 認証関連
  /auth/register:
    post:
      summary: ユーザー登録
      description: |
        新規ユーザーを登録し、組織を作成します。
        登録後は自動的にログイン状態となります。
      tags:
        - 認証
      requestBody:
        $ref: '#/components/requestBodies/RegisterRequest'
      responses:
        '201':
          description: 登録成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/AuthResponse'
        '409':
          description: メールアドレス重複
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                example:
                  success: false
                  error:
                    code: DUPLICATE_EMAIL
                    message: このメールアドレスは既に使用されています
        '422':
          $ref: '#/components/responses/ValidationError'
  
  /auth/login:
    post:
      summary: ログイン
      description: |
        登録済みユーザーのログイン認証を行います。
        正常に認証されるとアクセストークンとリフレッシュトークンが発行されます。
      tags:
        - 認証
      requestBody:
        $ref: '#/components/requestBodies/LoginRequest'
      responses:
        '200':
          description: ログイン成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/AuthResponse'
        '401':
          description: 認証失敗
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                example:
                  success: false
                  error:
                    code: INVALID_CREDENTIALS
                    message: メールアドレスまたはパスワードが正しくありません
        '403':
          description: アカウントロック
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                example:
                  success: false
                  error:
                    code: ACCOUNT_LOCKED
                    message: ログイン試行回数が多すぎます。15分後に再試行してください
                    details:
                      lockedUntil: "2025-05-15T09:45:00Z"
  
  /auth/logout:
    post:
      summary: ログアウト
      description: |
        ユーザーのログアウト処理を行います。
        リフレッシュトークンが無効化され、クライアント側のクッキーがクリアされます。
      tags:
        - 認証
      security:
        - BearerAuth: []
      responses:
        '200':
          description: ログアウト成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                example:
                  success: true
                  data:
                    message: ログアウトしました
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /auth/refresh:
    post:
      summary: トークン更新
      description: |
        リフレッシュトークンを使用して新しいアクセストークンを取得します。
        新しいアクセストークンと共に新しいリフレッシュトークンも発行されます。
      tags:
        - 認証
      requestBody:
        $ref: '#/components/requestBodies/RefreshTokenRequest'
      responses:
        '200':
          description: トークン更新成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          token:
                            $ref: '#/components/schemas/AuthToken'
        '401':
          description: 無効なトークン
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                example:
                  success: false
                  error:
                    code: INVALID_REFRESH_TOKEN
                    message: リフレッシュトークンが無効です
  
  /auth/password-reset/request:
    post:
      summary: パスワードリセット要求
      description: |
        パスワードリセットのためのメール送信を要求します。
        セキュリティ上の理由から、メールアドレスが存在しない場合でも同じ成功レスポンスを返します。
      tags:
        - 認証
      requestBody:
        $ref: '#/components/requestBodies/PasswordResetRequest'
      responses:
        '200':
          description: パスワードリセット要求成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                example:
                  success: true
                  data:
                    message: パスワードリセット手順を記載したメールを送信しました
  
  /auth/password-reset/confirm:
    post:
      summary: パスワードリセット確認
      description: |
        リセットトークンを検証し、新しいパスワードを設定します。
        パスワード変更後は全てのセッションが無効化されます。
      tags:
        - 認証
      requestBody:
        $ref: '#/components/requestBodies/PasswordResetConfirm'
      responses:
        '200':
          description: パスワードリセット成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                example:
                  success: true
                  data:
                    message: パスワードが正常にリセットされました
        '400':
          description: 無効なトークン
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                example:
                  success: false
                  error:
                    code: INVALID_RESET_TOKEN
                    message: パスワードリセットトークンが無効です
        '422':
          $ref: '#/components/responses/ValidationError'
  
  /auth/me:
    get:
      summary: 現在のユーザー情報取得
      description: 認証されたユーザー自身の情報を取得します。
      tags:
        - 認証
      security:
        - BearerAuth: []
      parameters:
        - name: fields
          in: query
          schema:
            type: string
          description: 取得するフィールドの指定（カンマ区切り）
          example: id,email,name
      responses:
        '200':
          description: ユーザー情報取得成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  # 物件関連
  /properties:
    get:
      summary: 物件一覧取得
      description: |
        ユーザーの所属組織の物件一覧を取得します。
        フィルタリング、ソート、ページネーションに対応しています。
      tags:
        - 物件
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: ページ番号
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
          description: 1ページあたりの結果数
        - name: sort
          in: query
          schema:
            type: string
          description: ソート条件（例：updatedAt:desc,name:asc）
        - name: name
          in: query
          schema:
            type: string
          description: 物件名による部分一致フィルタ
        - name: address
          in: query
          schema:
            type: string
          description: 住所による部分一致フィルタ
        - name: status
          in: query
          schema:
            type: string
          description: ステータスによるフィルタ（カンマ区切りで複数指定可）
        - name: area_min
          in: query
          schema:
            type: number
          description: 最小敷地面積によるフィルタ
        - name: area_max
          in: query
          schema:
            type: number
          description: 最大敷地面積によるフィルタ
        - name: zoneType
          in: query
          schema:
            type: string
          description: 用途地域によるフィルタ（カンマ区切りで複数指定可）
        - name: fields
          in: query
          schema:
            type: string
          description: 取得するフィールドの指定（カンマ区切り）
        - name: expand
          in: query
          schema:
            type: string
          description: 展開して取得する関連データ（現在対応：shapeData）
      responses:
        '200':
          description: 物件一覧取得成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Property'
                      meta:
                        type: object
                        properties:
                          total:
                            type: integer
                          page:
                            type: integer
                          limit:
                            type: integer
                          totalPages:
                            type: integer
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    
    post:
      summary: 新規物件登録
      description: 新しい物件情報を登録します。
      tags:
        - 物件
      security:
        - BearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/PropertyCreateRequest'
      responses:
        '201':
          description: 物件登録成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Property'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          $ref: '#/components/responses/ValidationError'
  
  /properties/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        description: 物件ID
    
    get:
      summary: 物件詳細取得
      description: 指定されたIDの物件詳細情報を取得します。
      tags:
        - 物件
      security:
        - BearerAuth: []
      parameters:
        - name: fields
          in: query
          schema:
            type: string
          description: 取得するフィールドの指定（カンマ区切り）
        - name: expand
          in: query
          schema:
            type: string
          description: 展開して取得する関連データ（カンマ区切り、対応：shapeData, documents)
      responses:
        '200':
          description: 物件詳細取得成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Property'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    
    put:
      summary: 物件情報更新
      description: 指定されたIDの物件情報を完全に更新します。
      tags:
        - 物件
      security:
        - BearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/PropertyUpdateRequest'
      responses:
        '200':
          description: 物件更新成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Property'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '422':
          $ref: '#/components/responses/ValidationError'
    
    patch:
      summary: 物件情報部分更新
      description: 指定されたIDの物件情報の一部を更新します。
      tags:
        - 物件
      security:
        - BearerAuth: []
      requestBody:
        description: 更新する物件情報の一部
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PropertyUpdateData'
      responses:
        '200':
          description: 物件部分更新成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          id:
                            type: string
                          updatedAt:
                            type: string
                            format: date-time
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '422':
          $ref: '#/components/responses/ValidationError'
    
    delete:
      summary: 物件削除
      description: 指定されたIDの物件を削除します。
      tags:
        - 物件
      security:
        - BearerAuth: []
      responses:
        '200':
          description: 物件削除成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          id:
                            type: string
                          deleted:
                            type: boolean
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  
  /properties/upload-survey:
    post:
      summary: 測量図アップロード
      description: |
        測量図をアップロードし、敷地形状を自動抽出します。
        サポートするファイル形式：PDF, DWG, DXF, JPEG, PNG
      tags:
        - 物件
      security:
        - BearerAuth: []
      requestBody:
        description: 測量図ファイルとパラメータ
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  description: 測量図ファイル
                propertyId:
                  type: string
                  description: 関連付ける物件ID（指定しない場合は形状データのみ返却）
      responses:
        '200':
          description: アップロード・抽出成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          shapeData:
                            $ref: '#/components/schemas/ShapeData'
                          property:
                            type: object
                            properties:
                              id:
                                type: string
                              updatedAt:
                                type: string
                                format: date-time
        '400':
          description: ファイルエラー
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                example:
                  success: false
                  error:
                    code: INVALID_FILE_FORMAT
                    message: サポートされていないファイル形式です
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          description: 形状抽出エラー
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                example:
                  success: false
                  error:
                    code: SHAPE_EXTRACTION_FAILED
                    message: 敷地形状の自動抽出に失敗しました
  
  /properties/{id}/shape:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        description: 物件ID
    
    put:
      summary: 敷地形状更新
      description: 指定されたIDの物件の敷地形状データを手動で更新します。
      tags:
        - 物件
      security:
        - BearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/ShapeUpdateRequest'
      responses:
        '200':
          description: 敷地形状更新成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          id:
                            type: string
                          shapeData:
                            $ref: '#/components/schemas/ShapeData'
                          updatedAt:
                            type: string
                            format: date-time
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '422':
          $ref: '#/components/responses/ValidationError'
  
  /properties/{id}/documents:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        description: 物件ID
    
    get:
      summary: 物件関連文書一覧取得
      description: 指定されたIDの物件に関連する文書一覧を取得します。
      tags:
        - 物件
        - 文書
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: ページ番号
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
          description: 1ページあたりの結果数
        - name: sort
          in: query
          schema:
            type: string
          description: ソート条件（例：updatedAt:desc,name:asc）
        - name: documentType
          in: query
          schema:
            type: string
          description: 文書タイプによるフィルタ（カンマ区切りで複数指定可）
      responses:
        '200':
          description: 文書一覧取得成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Document'
                      meta:
                        type: object
                        properties:
                          total:
                            type: integer
                          page:
                            type: integer
                          limit:
                            type: integer
                          totalPages:
                            type: integer
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    
    post:
      summary: 物件関連文書追加
      description: |
        指定されたIDの物件に関連する文書を追加します。
        サポートするファイル形式：PDF, DOCX, XLSX, JPEG, PNG, TIFF, DWG, DXF, ZIP
        最大ファイルサイズ：20MB
      tags:
        - 物件
        - 文書
      security:
        - BearerAuth: []
      requestBody:
        description: 文書ファイルとパラメータ
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
                - documentType
              properties:
                file:
                  type: string
                  format: binary
                  description: 文書ファイル
                documentType:
                  type: string
                  enum: [survey-map, register, contract, photo, other]
                  description: 文書タイプ
                description:
                  type: string
                  description: 文書の説明
      responses:
        '201':
          description: 文書追加成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Document'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '413':
          description: ファイルサイズエラー
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                example:
                  success: false
                  error:
                    code: FILE_TOO_LARGE
                    message: ファイルサイズが上限（20MB）を超えています
  
  /properties/{id}/history:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        description: 物件ID
    
    get:
      summary: 物件履歴取得
      description: 指定されたIDの物件の変更履歴を取得します。
      tags:
        - 物件
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: ページ番号
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
          description: 1ページあたりの結果数
        - name: action
          in: query
          schema:
            type: string
          description: アクションタイプによるフィルタ（create, update, delete）
      responses:
        '200':
          description: 履歴取得成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/HistoryEntry'
                      meta:
                        type: object
                        properties:
                          total:
                            type: integer
                          page:
                            type: integer
                          limit:
                            type: integer
                          totalPages:
                            type: integer
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  
  # ボリュームチェック関連
  /analysis/volume-check:
    post:
      summary: ボリュームチェック実行
      description: |
        物件情報と建築パラメータに基づいてボリュームチェックを実行し、結果を保存します。
        建築基準法の各種制限（建蔽率、容積率、斜線制限、日影規制等）を考慮した計算を行います。
      tags:
        - 分析
        - ボリュームチェック
      security:
        - BearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/VolumeCheckRequest'
      responses:
        '201':
          description: ボリュームチェック成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/VolumeCheckResult'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '422':
          description: バリデーションエラーまたは計算エラー
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                example:
                  success: false
                  error:
                    code: CALCULATION_ERROR
                    message: ボリュームチェックの計算中にエラーが発生しました
                    details:
                      reason: 指定された階数では建築基準法の高さ制限に違反します
  
  /analysis/volume-check/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        description: ボリュームチェックID
    
    get:
      summary: ボリュームチェック結果取得
      description: 指定されたIDのボリュームチェック結果を取得します。
      tags:
        - 分析
        - ボリュームチェック
      security:
        - BearerAuth: []
      parameters:
        - name: fields
          in: query
          schema:
            type: string
          description: 取得するフィールドの指定（カンマ区切り）
        - name: include_model
          in: query
          schema:
            type: boolean
            default: false
          description: 3Dモデルデータを含めるか
      responses:
        '200':
          description: ボリュームチェック結果取得成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/VolumeCheckResult'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    
    delete:
      summary: ボリュームチェック結果削除
      description: 指定されたIDのボリュームチェック結果を削除します。
      tags:
        - 分析
        - ボリュームチェック
      security:
        - BearerAuth: []
      responses:
        '200':
          description: ボリュームチェック結果削除成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          id:
                            type: string
                          deleted:
                            type: boolean
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  
  /properties/{id}/volume-checks:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        description: 物件ID
    
    get:
      summary: 物件のボリュームチェック一覧取得
      description: 指定された物件IDに関連するボリュームチェック結果の一覧を取得します。
      tags:
        - 分析
        - ボリュームチェック
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: ページ番号
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
          description: 1ページあたりの結果数
        - name: sort
          in: query
          schema:
            type: string
          description: ソート条件（例：createdAt:desc）
        - name: assetType
          in: query
          schema:
            type: string
          description: アセットタイプによるフィルタ（カンマ区切りで複数指定可）
      responses:
        '200':
          description: ボリュームチェック一覧取得成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            propertyId:
                              type: string
                            assetType:
                              type: string
                            buildingArea:
                              type: number
                            totalFloorArea:
                              type: number
                            buildingHeight:
                              type: number
                            consumptionRate:
                              type: number
                            createdAt:
                              type: string
                              format: date-time
                      meta:
                        type: object
                        properties:
                          total:
                            type: integer
                          page:
                            type: integer
                          limit:
                            type: integer
                          totalPages:
                            type: integer
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  
  /analysis/volume-check/{id}/export:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        description: ボリュームチェックID
    
    get:
      summary: ボリュームチェック結果PDF出力
      description: 指定されたIDのボリュームチェック結果をPDF形式で出力します。
      tags:
        - 分析
        - ボリュームチェック
      security:
        - BearerAuth: []
      parameters:
        - name: include_3d
          in: query
          schema:
            type: boolean
            default: true
          description: 3Dモデル画像を含めるか
        - name: template
          in: query
          schema:
            type: string
            enum: [simple, detailed, presentation]
            default: detailed
          description: PDFテンプレート
      responses:
        '200':
          description: PDF出力成功
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  
  /analysis/volume-check/{id}/model:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        description: ボリュームチェックID
    
    get:
      summary: 3Dモデルデータ取得
      description: 指定されたIDのボリュームチェック結果の3Dモデルデータを取得します。
      tags:
        - 分析
        - ボリュームチェック
      security:
        - BearerAuth: []
      parameters:
        - name: format
          in: query
          schema:
            type: string
            enum: [three.js, gltf, obj]
            default: three.js
          description: モデル形式
      responses:
        '200':
          description: モデルデータ取得成功
          content:
            application/json:
              schema:
                type: object
                description: Three.js形式のモデルデータ
        '400':
          description: 未対応フォーマット
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                example:
                  success: false
                  error:
                    code: UNSUPPORTED_FORMAT
                    message: 指定されたモデル形式はサポートされていません
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  
  # ジオコーディング関連
  /geocode:
    get:
      summary: 住所から緯度経度情報取得
      description: 住所から緯度経度情報を取得します。
      tags:
        - ジオコーディング
      security:
        - BearerAuth: []
      parameters:
        - name: address
          in: query
          required: true
          schema:
            type: string
          description: 住所
      responses:
        '200':
          description: 緯度経度情報取得成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          lat:
                            type: number
                            format: float
                          lng:
                            type: number
                            format: float
                          formatted_address:
                            type: string
        '400':
          description: 住所解析エラー
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                example:
                  success: false
                  error:
                    code: ADDRESS_PARSE_ERROR
                    message: 住所を解析できませんでした
        '401':
          $ref: '#/components/responses/UnauthorizedError'

# タグ定義
tags:
  - name: 認証
    description: ユーザー認証関連のエンドポイント
  - name: 物件
    description: 物件情報管理関連のエンドポイント
  - name: 文書
    description: 文書管理関連のエンドポイント
  - name: 分析
    description: ボリュームチェックや収益性試算などの分析関連のエンドポイント
  - name: ボリュームチェック
    description: 建築可能ボリュームの計算関連のエンドポイント
  - name: ジオコーディング
    description: 住所・位置情報関連のエンドポイント